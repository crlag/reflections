Q: What happens when you initialize a repository? Why do you need to do it?

A: Git creates the files that contains the metadata of the repository in the folder '.git'. It also list all the file in the repository candidate to be tracked by future commits.

It is necessary so git knows that this is a repository.

Command(s): 'git init'

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?

A: The staging area tell git which files to track. This is different from the working directory, because there we can keep all the files of our project, including those we don't necessarily want to track with git.

Command(s): 'git add <name file>'

Q: How can you use the staging area to make sure you have one commit per logical change?

A: Using 'git diff --staged' I can compare the files in the staging area with the last commit and check what changes I have introduced since.

Command(s): 'git diff --staged'

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A: Basically any time you want to keep a version of your project and easily access it without having to checkout to a previous version. You can create a branch with a working version of your project and create a different branch on which you can introduce significant changes or perform experiments. Then yo can easily move among branches without having to checkout back and forth from and to different points of your commit history.

Working in teams. Each teammate working on a different aspect of the project.

Command(s): 'git branch' -- Lists all branches
            'git branch <name new branch>' - Creates a new branch

Q: How do the diagrams help you visualize the branch structure?

A: It helps by depicting first the point in which they diverge from the master brach, and second the reachability of the commits performed in each brach.

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A: By merging to branches we obtain a combined version of the changes added on the files in the two branches, without losing the commit history of any branch.

We represent it that way because the merged branch becomes parent of the two branches.

Command(s): 'git merge branch1 branch2'

Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

A:

PROS

- Saves time
- Avoid the tedious process of manually comparing two or more file to detect changes.

CONS:

- Merging conflicts
